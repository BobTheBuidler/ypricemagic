name: "Add New Blockchain"
description: "A checklist for adding support for a new blockchain to ypricemagic"
title: "[Blockchain] Add: "
labels: [blockchain, enhancement]
body:
  - type: input
    id: blockchain_name
    attributes:
      label: Blockchain Name
      description: "What is the name of the blockchain?"
      placeholder: "ExampleChain"
    validations:
      required: true

  - type: input
    id: documentation
    attributes:
      label: Documentation / Website URL
      description: "Link to official docs, developer portal, etc."
      placeholder: "https://docs.examplechain.org"
    validations:
      required: true

  - type: checkboxes
    id: integration_files
    attributes:
      label: Integration File Checklist
      description: |
        For each file, check off when the main work is done.  
        **Subtasks for each file are shown as Markdown for reference.**
      options:
          
        - label: "Add network details to `./y/networks.py`"
          description: |
            - [ ] Add the chainid to the `Network` enum
            - [ ] Add a short label for the chain to `Network.label`
            - [ ] Add the network name to `Network.name`
          
        - label: "Add contract addresses for common tokens to `./y/constants.py`"
          description: |
            Define the Contract for each of the tokens below. If the new blockchain does not have one of the tokens, simply assign `None`. Follow the same format as the others.
            - [ ] WETH
            - [ ] WBTC
            - [ ] USDC
            - [ ] USDT
            - [ ] DAI

            - [ ] Add the contract addresses for any "safe" stablecoins to the `_STABLECOINS` mapping
            - [ ] Add the contract address for the wrapped form of the network's gas token to `WRAPPED_GAS_COINS`. For example, on Ethereum, Optimism, and Arbitrum it would be the WETH address but on Polygon it is the WMATIC address

        - label: "Add chainlink feeds to `./y/prices/chainlink.py`"
          description: |
            - [ ] Map any tokens with all chainlink feeds from https://docs.chain.link/data-feeds/price-feeds/addresses that show a green indicator
            
        - label: "Update `./y/classes/common.py`"
          description: |
            - [ ] Add the symbol for the wrapped form of the network's gas token. For example, on Ethereum, Optimism, and Arbitrum it would be "WETH" but on Polygon it is "WMATIC"

        - label: "Add Uniswap V2 deployment details and any forks to `./y/prices/dex/uniswap/v2_forks.py`"
          description:
            - [ ] Add the factory and router addresses for Uniswap V2 and all known direct forks

        - label: "Add Uniswap V3 deployment details to `./y/prices/dex/uniswap/v3.py`"
          description: |
            - [ ] Add the factory address for the new chain
            - [ ] Add the quoter address for the new chain
            - [ ] Add the fee tiers that Uniswap V3 supports on the new chain

        - label: "Add any Uniswap V3 fork deployment details to `forked_deployments` in `./y/prices/dex/uniswap/v3.py`"
          description: |
            - [ ] Add the factory address for the new chain
            - [ ] Add the quoter address for the new chain
            - [ ] Add the fee tiers that Uniswap V3 supports on the new chain

        - label: "Add Balancer V2 and any forks to `./y/prices/dex/balancer/v2.py`"
          description: |
            - [ ] Add the Vault address for Balancer V2 and all known direct forks, if applicable
            
        - label: "Add multicall address to `./y/utils/multicall.py`"
          description: |
            - [ ] Add the multicall3 address for the new chain. This will typically be `0xcA11bde05977b3631167028862bE2a173976CA11`

  - type: textarea
    id: extra
    attributes:
      label: Additional Information
      description: "Add any extra details, context, links, or considerations here."
      placeholder: "Anything else reviewers should know?"


- in ./yearn/prices/chainlink.py:
  - [ ] specify any chainlink feeds available on the chain in `feeds`.
  - [ ] specify the chainlink registry address in `registries` if applicable, or specify None if not applicable.

- in ./yearn/ironbank.py:
  - [ ] add ironbank deployment address

- in ./yearn/prices/compound.py:
  - [ ] add ib comptroller

- in ./yearn/v2/registry.py:
  - [ ] add v2 vault registry

- in yearn/yearn.py:
  - [ ] add v2 vault registry and 
  - [ ]ironbank registry

- in ./yearn/prices/constants.py:
  - [ ] specify `ib_snapshot_block_by_network`, if any, the start block of Ironbank on this network or specify '1' if not applicable.

- in ./yearn/prices/uniswap/v2.py:
  - [ ] specify the factory and router address for any important uni v2 forks on the chain.

in ./yearn/prices/uniswap/v3.py:
  - [ ] add info about uni v3 deployed on network

- in ./yearn/utils.py:
  - [ ] specify `BINARY_SEARCH_BARRIER` as 0 if all historical data is available. If historical data not available due to a network upgrade/etc, specify the first block of the available historical data.

- in ./yearn/middleware/middleware.py:
  - [ ] specify `BATCH_SIZE` of approx 1 day based on avg block times on the chain.


It's important to test to make sure everything works!

Once you've handled everything above, type `make up <network>` into your terminal replacing network with your network name at the project root. The network specific exporters will start running in docker and any exceptions will show in your terminal. If there are no exceptions, and everything appears to be running smoothly then it should be working correctly.

- [ ] yes I have tested it and it is running as expected
